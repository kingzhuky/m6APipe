main = "Heatmap of Different Methylation", scale = "row")
matrix = m6a.anno.matrix
dmres = diffm6A.list[[which(names(diffm6A.list)==compare_str)]]
dmg = subset(dmres, pvalue < 0.05)
matrix1 = matrix[,-c(2:3)]
rownames(matrix1) = matrix1$PeakRegion
matrix1 = matrix1[,-1]
dm_mat = matrix1[row.names(dmg),rownames(coldata)]
select <- dmg[order(dmg$log2FC, decreasing = TRUE), ]
dm_mat = log2(dm_mat+1)
dm_mat = dm_mat[rownames(select),]
dm_mat = na.omit(dm_mat)
pca_plot(matrix1,coldata)
coldt <- coldata
coldt$name <-  row.names(coldata)
coldt <- as.data.frame(coldt[order(coldata$Type),])
dm_mat <- dm_mat[,order(sub("-B","",sub("[0-9]*","",colnames(dm_mat))))]
dmmat <- dm_mat[,-which(colnames(dm_mat) %in% list)]
pheatmap(dmmat, cluster_rows=FALSE, show_rownames=F, cluster_cols=T, annotation_col=test,
color = colorRampPalette(c(rep('#1C2B6F',1),'black', rep('#E31E26',1)))(50), annotation_colors = anno_colors,
main = "Heatmap of Different Methylation", scale = "row")
pheatmap(dmmat, cluster_rows=FALSE, show_rownames=F, cluster_cols=F, annotation_col=test,
color = colorRampPalette(c(rep('#1C2B6F',1),'black', rep('#E31E26',1)))(50), annotation_colors = anno_colors,
main = "Heatmap of Different Methylation", scale = "row")
pheatmap(dmmat, cluster_rows=FALSE, show_rownames=F, cluster_cols=F, annotation_col=test,
main = "Heatmap of Different Methylation", scale = "row")
pheatmap(dm_mat, cluster_rows=FALSE, show_rownames=F, cluster_cols=F, annotation_col=coldata,
main = "Heatmap of Different Methylation", scale = "row")
# htseq.filelist = grep("htseq",list.files(path = "./",pattern = "input.count"), value = T)
# expression.matrix <- NULL
# for( file in htseq.filelist ){
#   tmp.expression.table <- as.matrix(read.delim(file,sep = "\t", header = TRUE, row.names = 1,stringsAsFactors = F,check.names=F))
#   expression.matrix <- cbind(expression.matrix, tmp.expression.table)
# }
# expression.matrix <- expression.matrix[c(-nrow(expression.matrix):-(nrow(expression.matrix)-4)),]
# colnames(expression.matrix) <- as.matrix(lapply(strsplit(colnames(expression.matrix),".input"), function(x){ x[1]}))
compare.list <- "N_vs_T"
diffexpression.filelist <- grep("Deseq2",list.files(pattern = ".csv"), value = T)
diffexpression.list <- NULL
for( compare_str in compare.list ){
diffexpression.list[[compare_str]] <- read.csv(grep(sub("_vs_","_",compare_str), diffexpression.filelist, value = T),header = T,row.names = 1, check.names=F)
colnames(diffexpression.list[[compare_str]])[1] <- "ID"
}
expression.matrix <- diffexpression.list[[1]][,seq(8,133)]
colnames(expression.matrix) <- as.matrix(lapply(strsplit(colnames(expression.matrix),".input"), function(x){ x[1]}))
library(ggplot2)
library(ggrepel)
library(ggsci)
library(pheatmap)
getwd()
setwd("E:/zky/小任务/colon")
pca_plot <- function(mat,coldt){
sum = summary(prcomp(mat[,rownames(coldt)]))
pcaData <- as.data.frame(sum$rotation)
ggplot(pcaData, aes(PC1, PC2, color=coldt$Type)) +
geom_point(size=3) +
geom_text_repel(aes(label = row.names(pcaData)))+
xlab(paste("PC1","(",round(100*sum$importance[2,1],1),"%)",sep = "")) +
ylab(paste("PC2","(",round(100*sum$importance[2,2],1),"%)",sep = "")) +
scale_colour_hue("Type") +
#coord_fixed() +
theme_bw()
}
passed_sample_list <- read.table("pass_sample_id.csv",stringsAsFactors = F)[,1]
designfile <- "formatted_designfile.txt"
designtable <- read.csv(designfile, head = TRUE, stringsAsFactors=FALSE, colClasses = c("character"), check.names=F)
design.matrix <- as.matrix(designtable$Group)
rownames(design.matrix) <- designtable$Sample_ID
colnames(design.matrix) <- "Type"
# htseq.filelist = grep("htseq",list.files(path = "./",pattern = "input.count"), value = T)
# expression.matrix <- NULL
# for( file in htseq.filelist ){
#   tmp.expression.table <- as.matrix(read.delim(file,sep = "\t", header = TRUE, row.names = 1,stringsAsFactors = F,check.names=F))
#   expression.matrix <- cbind(expression.matrix, tmp.expression.table)
# }
# expression.matrix <- expression.matrix[c(-nrow(expression.matrix):-(nrow(expression.matrix)-4)),]
# colnames(expression.matrix) <- as.matrix(lapply(strsplit(colnames(expression.matrix),".input"), function(x){ x[1]}))
compare.list <- "N_vs_T"
diffexpression.filelist <- grep("Deseq2",list.files(pattern = ".csv"), value = T)
diffexpression.list <- NULL
for( compare_str in compare.list ){
diffexpression.list[[compare_str]] <- read.csv(grep(sub("_vs_","_",compare_str), diffexpression.filelist, value = T),header = T,row.names = 1, check.names=F)
colnames(diffexpression.list[[compare_str]])[1] <- "ID"
}
expression.matrix <- diffexpression.list[[1]][,seq(8,133)]
colnames(expression.matrix) <- as.matrix(lapply(strsplit(colnames(expression.matrix),".input"), function(x){ x[1]}))
colnames(expression.matrix) <- gsub("[.]","-",colnames(expression.matrix))
rownames(expression.matrix) <- diffexpression.list[[1]]$ID
matrix = expression.matrix
group1 = strsplit(compare.list, "_vs_")[[1]][1]
group2 = strsplit(compare.list, "_vs_")[[1]][2]
coldata0 = as.data.frame(design.matrix)
coldata = subset(coldata0, Type==group1|Type==group2)
coldata$Type = as.factor(coldata$Type)
#diff_expression_matrix
deres = diffexpression.list[[which(names(diffexpression.list)==compare.list)]][,seq(1,7)]
#diff_expression_matrix
deres = diffexpression.list[[which(names(diffexpression.list)==compare.list)]][,seq(1,7)]
deg = subset(deres, abs(log2FoldChange)> 0.2 & pvalue < 0.05)
deg = subset(deres, abs(log2FoldChange)> 2 & pvalue < 0.05)
rownames(deg) = deg$ID
deg = deg[rownames(deg)[row.names(deg) %in% row.names(expression.matrix)],]
#diff_genes‘ matrix
de_mat = expression.matrix[rownames(deg),rownames(coldata)]
select <- deg[order(deg$log2FoldChange, decreasing = TRUE), ]
de_mat = log2(de_mat+1)
de_mat = de_mat[rownames(select),]
de_mat = na.omit(de_mat)
new_coldata <- as.data.frame(design.matrix[which(row.names(design.matrix) %in% passed_sample_list),])
colnames(new_coldata) <- "Type"
new.expression.matrix <- expression.matrix[,which(colnames(expression.matrix) %in% passed_sample_list)]
pca_plot(de_mat,coldata)
anno_color = c("#e34a33", "#2ca25f")
names(anno_color) = c(levels(as.factor(coldata$Type)))
anno_colors = list(Type = anno_color)
de_mat <- de_mat[,order(sub("-B","",sub("[0-9]*","",colnames(de_mat))))]
demat  <- de_mat[,which(colnames(expression.matrix) %in% passed_sample_list)]
pheatmap(de_mat, cluster_rows=FALSE, show_rownames=F, cluster_cols=F, annotation_col=coldata,
color = colorRampPalette(c(rep('#1C2B6F',1),'black', rep('#E31E26',1)))(50), annotation_colors = anno_colors,
main = "Heatmap of Different Expression", breaks = bk)
bk = unique(c(seq(-2,2, length=100)))
pheatmap(de_mat, cluster_rows=FALSE, show_rownames=F, cluster_cols=F, annotation_col=coldata,
color = colorRampPalette(c(rep('#1C2B6F',1),'black', rep('#E31E26',1)))(50), annotation_colors = anno_colors,
main = "Heatmap of Different Expression", breaks = bk)
pheatmap(de_mat, cluster_rows=FALSE, show_rownames=F, cluster_cols=F, annotation_col=coldata,
color = colorRampPalette(c(rep('#1C2B6F',1),'black', rep('#E31E26',1)))(50),
main = "Heatmap of Different Expression", breaks = bk)
c(rep('#1C2B6F',1),'black', rep('#E31E26',1))
colorRampPalette(c(rep('#1C2B6F',1),'black', rep('#E31E26',1)))(50)
pheatmap(de_mat, cluster_rows=FALSE, show_rownames=F, cluster_cols=F, annotation_col=coldata,
annotation_colors = anno_colors,
main = "Heatmap of Different Expression", breaks = bk)
colorRampPalette(c(rep('#1C2B6F',1), rep('#E31E26',1)))(50)
pheatmap(de_mat, cluster_rows=FALSE, show_rownames=F, cluster_cols=F, annotation_col=coldata,
color = colorRampPalette(c(rep('#1C2B6F',1), rep('#E31E26',1)))(50), annotation_colors = anno_colors,
main = "Heatmap of Different Expression", breaks = bk)
pheatmap(de_mat, cluster_rows=FALSE, show_rownames=F, cluster_cols=F, annotation_col=coldata,
color = colorRampPalette(c(rep('#1C2B6F',1), rep('#E31E26',1)))(100), annotation_colors = anno_colors,
main = "Heatmap of Different Expression", breaks = bk)
pheatmap(de_mat, cluster_rows=FALSE, show_rownames=F, cluster_cols=F, annotation_col=coldata,
color = colorRampPalette(c(rep('#1C2B6F',1),"black", rep('#E31E26',1)))(100), annotation_colors = anno_colors,
main = "Heatmap of Different Expression", breaks = bk)
#diff_expression_matrix
deres = diffexpression.list[[which(names(diffexpression.list)==compare.list)]][,seq(1,7)]
deg = subset(deres, abs(log2FoldChange)> 0.58 & pvalue < 0.05)
rownames(deg) = deg$ID
deg = deg[rownames(deg)[row.names(deg) %in% row.names(expression.matrix)],]
select <- deg[order(deg$log2FoldChange, decreasing = TRUE), ]
#diff_genes‘ matrix
de_mat = expression.matrix[rownames(deg),rownames(coldata)]
de_mat = de_mat[rownames(select),]
de_mat = log2(de_mat+1)
de_mat = na.omit(de_mat)
new_coldata <- as.data.frame(design.matrix[which(row.names(design.matrix) %in% passed_sample_list),])
colnames(new_coldata) <- "Type"
new.expression.matrix <- expression.matrix[,which(colnames(expression.matrix) %in% passed_sample_list)]
pca_plot(de_mat,coldata)
anno_color = c("#e34a33", "#2ca25f")
names(anno_color) = c(levels(as.factor(coldata$Type)))
anno_colors = list(Type = anno_color)
de_mat <- de_mat[,order(sub("-B","",sub("[0-9]*","",colnames(de_mat))))]
bk = unique(c(seq(-2,2, length=100)))
demat  <- de_mat[,which(colnames(expression.matrix) %in% passed_sample_list)]
pheatmap(de_mat, cluster_rows=FALSE, show_rownames=F, cluster_cols=F, annotation_col=coldata,
color = colorRampPalette(c(rep('#1C2B6F',1),"black", rep('#E31E26',1)))(100), annotation_colors = anno_colors,
main = "Heatmap of Different Expression", breaks = bk)
bk = unique(c(seq(-4,4, length=100)))
pheatmap(de_mat, cluster_rows=FALSE, show_rownames=F, cluster_cols=F, annotation_col=coldata,
color = colorRampPalette(c(rep('#1C2B6F',1),"black", rep('#E31E26',1)))(100), annotation_colors = anno_colors,
main = "Heatmap of Different Expression", breaks = bk)
head(de_mat)
de_mat <- as.data.frame(scale(de_mat,center=T,scale=T))
head(de_mat)
#diff_genes‘ matrix
de_mat = expression.matrix[rownames(deg),rownames(coldata)]
select <- deg[order(deg$log2FoldChange, decreasing = TRUE), ]
de_mat <- as.data.frame(scale(de_mat,center=T,scale=T))
head(de_mat)
#diff_genes‘ matrix
de_mat = expression.matrix[rownames(deg),rownames(coldata)]
select <- deg[order(deg$log2FoldChange, decreasing = TRUE), ]
de_mat <- as.data.frame(scale(log2(de_mat+1),center=T,scale=T))
head(de_mat)
#diff_genes‘ matrix
de_mat = expression.matrix[rownames(deg),rownames(coldata)]
select <- deg[order(deg$log2FoldChange, decreasing = TRUE), ]
de_mat <- as.data.frame(scale(de_mat,center=T,scale=T))
de_mat = de_mat[rownames(select),]
de_mat = na.omit(de_mat)
new_coldata <- as.data.frame(design.matrix[which(row.names(design.matrix) %in% passed_sample_list),])
colnames(new_coldata) <- "Type"
new.expression.matrix <- expression.matrix[,which(colnames(expression.matrix) %in% passed_sample_list)]
anno_color = c("#e34a33", "#2ca25f")
names(anno_color) = c(levels(as.factor(coldata$Type)))
anno_colors = list(Type = anno_color)
de_mat <- de_mat[,order(sub("-B","",sub("[0-9]*","",colnames(de_mat))))]
demat  <- de_mat[,which(colnames(expression.matrix) %in% passed_sample_list)]
bk = unique(c(seq(-2,2, length=100)))
pheatmap(de_mat, cluster_rows=FALSE, show_rownames=F, cluster_cols=F, annotation_col=coldata,
color = colorRampPalette(c(rep('#1C2B6F',1),"black", rep('#E31E26',1)))(100), annotation_colors = anno_colors,
main = "Heatmap of Different Expression", breaks = bk)
htseq.filelist = grep("htseq",list.files(path = "./",pattern = "input.count"), value = T)
expression.matrix <- NULL
for( file in htseq.filelist ){
tmp.expression.table <- as.matrix(read.delim(file,sep = "\t", header = TRUE, row.names = 1,stringsAsFactors = F,check.names=F))
expression.matrix <- cbind(expression.matrix, tmp.expression.table)
}
expression.matrix <- expression.matrix[c(-nrow(expression.matrix):-(nrow(expression.matrix)-4)),]
colnames(expression.matrix) <- as.matrix(lapply(strsplit(colnames(expression.matrix),".input"), function(x){ x[1]}))
compare.list <- "N_vs_T"
diffexpression.filelist <- grep("Deseq2",list.files(pattern = ".csv"), value = T)
diffexpression.list <- NULL
# expression.matrix <- diffexpression.list[[1]][,seq(8,133)]
# colnames(expression.matrix) <- as.matrix(lapply(strsplit(colnames(expression.matrix),".input"), function(x){ x[1]}))
# colnames(expression.matrix) <- gsub("[.]","-",colnames(expression.matrix))
# rownames(expression.matrix) <- diffexpression.list[[1]]$ID
matrix = expression.matrix
group1 = strsplit(compare.list, "_vs_")[[1]][1]
group2 = strsplit(compare.list, "_vs_")[[1]][2]
coldata0 = as.data.frame(design.matrix)
coldata = subset(coldata0, Type==group1|Type==group2)
coldata$Type = as.factor(coldata$Type)
#diff_expression_matrix
deres = diffexpression.list[[which(names(diffexpression.list)==compare.list)]][,seq(1,7)]
deg = subset(deres, abs(log2FoldChange)> 0.58 & pvalue < 0.05)
rownames(deg) = deg$ID
deg = deg[rownames(deg)[row.names(deg) %in% row.names(expression.matrix)],]
#diff_expression_matrix
deres = diffexpression.list[[which(names(diffexpression.list)==compare.list)]][,seq(1,7)]
head(deres)
htseq.filelist = grep("htseq",list.files(path = "./",pattern = "input.count"), value = T)
expression.matrix <- NULL
for( file in htseq.filelist ){
tmp.expression.table <- as.matrix(read.delim(file,sep = "\t", header = TRUE, row.names = 1,stringsAsFactors = F,check.names=F))
expression.matrix <- cbind(expression.matrix, tmp.expression.table)
}
colnames(expression.matrix) <- as.matrix(lapply(strsplit(colnames(expression.matrix),".input"), function(x){ x[1]}))
compare.list <- "N_vs_T"
diffexpression.filelist <- grep("Deseq2",list.files(pattern = ".csv"), value = T)
diffexpression.list <- NULL
for( compare_str in compare.list ){
diffexpression.list[[compare_str]] <- read.csv(grep(sub("_vs_","_",compare_str), diffexpression.filelist, value = T),header = T,row.names = 1, check.names=F)
colnames(diffexpression.list[[compare_str]])[1] <- "ID"
}
# expression.matrix <- diffexpression.list[[1]][,seq(8,133)]
# colnames(expression.matrix) <- as.matrix(lapply(strsplit(colnames(expression.matrix),".input"), function(x){ x[1]}))
# colnames(expression.matrix) <- gsub("[.]","-",colnames(expression.matrix))
# rownames(expression.matrix) <- diffexpression.list[[1]]$ID
matrix = expression.matrix
group1 = strsplit(compare.list, "_vs_")[[1]][1]
group2 = strsplit(compare.list, "_vs_")[[1]][2]
coldata0 = as.data.frame(design.matrix)
coldata = subset(coldata0, Type==group1|Type==group2)
coldata$Type = as.factor(coldata$Type)
#diff_expression_matrix
deres = diffexpression.list[[which(names(diffexpression.list)==compare.list)]][,seq(1,7)]
View(QC.peaks.list)
deg = subset(deres, abs(log2FoldChange)> 0.58 & pvalue < 0.05)
rownames(deg) = deg$ID
deg = deg[rownames(deg)[row.names(deg) %in% row.names(expression.matrix)],]
#diff_genes‘ matrix
de_mat = expression.matrix[rownames(deg),rownames(coldata)]
select <- deg[order(deg$log2FoldChange, decreasing = TRUE), ]
de_mat <- as.data.frame(scale(de_mat,center=T,scale=T))
de_mat = de_mat[rownames(select),]
new_coldata <- as.data.frame(design.matrix[which(row.names(design.matrix) %in% passed_sample_list),])
de_mat = na.omit(de_mat)
colnames(new_coldata) <- "Type"
new.expression.matrix <- expression.matrix[,which(colnames(expression.matrix) %in% passed_sample_list)]
pca_plot(de_mat,coldata)
anno_color = c("#e34a33", "#2ca25f")
names(anno_color) = c(levels(as.factor(coldata$Type)))
anno_colors = list(Type = anno_color)
de_mat <- de_mat[,order(sub("-B","",sub("[0-9]*","",colnames(de_mat))))]
head(de_mat)
de_mat <- de_mat[,order(sub("-B","",sub("[0-9]*","",colnames(de_mat))))]
demat  <- de_mat[,which(colnames(expression.matrix) %in% passed_sample_list)]
bk = unique(c(seq(-2,2, length=100)))
pheatmap(de_mat, cluster_rows=FALSE, show_rownames=F, cluster_cols=F, annotation_col=coldata,
color = colorRampPalette(c(rep('#1C2B6F',1),"black", rep('#E31E26',1)))(100), annotation_colors = anno_colors,
main = "Heatmap of Different Expression", breaks = bk)
#diff_genes‘ matrix
de_mat = expression.matrix[rownames(deg),rownames(coldata)]
select <- deg[order(deg$log2FoldChange, decreasing = TRUE), ]
de_mat <- log2(de_mat+1)
de_mat = de_mat[rownames(select),]
de_mat = na.omit(de_mat)
de_mat <- de_mat[,order(sub("-B","",sub("[0-9]*","",colnames(de_mat))))]
demat  <- de_mat[,which(colnames(expression.matrix) %in% passed_sample_list)]
bk = unique(c(seq(-2,2, length=100)))
pheatmap(de_mat, cluster_rows=FALSE, show_rownames=F, cluster_cols=F, annotation_col=coldata,
color = colorRampPalette(c(rep('#1C2B6F',1),"black", rep('#E31E26',1)))(100), annotation_colors = anno_colors,
main = "Heatmap of Different Expression", breaks = bk)
pheatmap(de_mat, cluster_rows=FALSE, show_rownames=F, cluster_cols=F, annotation_col=coldata,
color = colorRampPalette(c(rep('#1C2B6F',1),"black", rep('#E31E26',1)))(100), annotation_colors = anno_colors,
main = "Heatmap of Different Expression", breaks = bk)
# m6A quantification matrix
m6a.matrix <- as.matrix(read.table(file = "quantification/MATK_quantification.matrix", header = T, row.names = 1, check.names=F))
m6a.anno.matrix <- as.data.frame(m6a.matrix)
m6a.anno.matrix$PeakRegion <- rownames(m6a.matrix)
m6a.anno.matrix <- merge(x = annotation.info,y = m6a.anno.matrix,by = "PeakRegion",all.y = TRUE)
m6a.arrange.matrix = m6a.anno.matrix[,-c(2:3)]
rownames(m6a.arrange.matrix) = m6a.arrange.matrix$PeakRegion
m6a.arrange.matrix = m6a.arrange.matrix[,-1]
m6a.arrange.matrix <- as.data.frame(scale(m6a.arrange.matrix,center=T,scale=T))
new_coldata <- as.data.frame(design.matrix[which(row.names(design.matrix) %in% passed_sample_list),])
colnames(new_coldata) <- "Type"
new_m6a_matrix <- m6a.arrange.matrix[,which(colnames(m6a.arrange.matrix) %in% passed_sample_list)]
log2.new_m6a_matrix <- log2(new_m6a_matrix+1)
pca_plot(m6a.arrange.matrix,coldata)
pca_plot(new_m6a_matrix,new_coldata)
pheatmap(de_mat, cluster_rows=FALSE, show_rownames=F, cluster_cols=F, annotation_col=coldata,
color = colorRampPalette(c(rep('#1C2B6F',1),"black", rep('#E31E26',1)))(100), annotation_colors = anno_colors,
main = "Heatmap of Different Expression")
head(de_mat)
htseq.filelist = grep("htseq",list.files(path = "./",pattern = "input.count"), value = T)
expression.matrix <- NULL
for( file in htseq.filelist ){
tmp.expression.table <- as.matrix(read.delim(file,sep = "\t", header = TRUE, row.names = 1,stringsAsFactors = F,check.names=F))
expression.matrix <- cbind(expression.matrix, tmp.expression.table)
}
colnames(expression.matrix) <- as.matrix(lapply(strsplit(colnames(expression.matrix),".input"), function(x){ x[1]}))
compare.list <- "N_vs_T"
# expression.matrix <- diffexpression.list[[1]][,seq(8,133)]
# colnames(expression.matrix) <- as.matrix(lapply(strsplit(colnames(expression.matrix),".input"), function(x){ x[1]}))
# colnames(expression.matrix) <- gsub("[.]","-",colnames(expression.matrix))
# rownames(expression.matrix) <- diffexpression.list[[1]]$ID
matrix = expression.matrix
#diff_expression_matrix
deres = diffexpression.list[[which(names(diffexpression.list)==compare.list)]][,seq(1,7)]
deg = subset(deres, abs(log2FoldChange)> 0.58 & pvalue < 0.05)
rownames(deg) = deg$ID
deg = deg[rownames(deg)[row.names(deg) %in% row.names(expression.matrix)],]
#diff_genes‘ matrix
de_mat = expression.matrix[rownames(deg),rownames(coldata)]
head (de_mat)
select <- deg[order(deg$log2FoldChange, decreasing = TRUE), ]
de_mat <- log2(de_mat+1)
de_mat = de_mat[rownames(select),]
de_mat = na.omit(de_mat)
de_mat <- de_mat[,order(sub("-B","",sub("[0-9]*","",colnames(de_mat))))]
pheatmap(de_mat, cluster_rows=FALSE, show_rownames=F, cluster_cols=F, annotation_col=coldata,
color = colorRampPalette(c(rep('#1C2B6F',1),"black", rep('#E31E26',1)))(50), annotation_colors = anno_colors,
main = "Heatmap of Different Expression")
# m6A quantification matrix
m6a.matrix <- as.matrix(read.table(file = "quantification/QNB_quantification.matrix", header = T, row.names = 1, check.names=F))
m6a.anno.matrix <- as.data.frame(m6a.matrix)
m6a.anno.matrix$PeakRegion <- rownames(m6a.matrix)
m6a.anno.matrix <- merge(x = annotation.info,y = m6a.anno.matrix,by = "PeakRegion",all.y = TRUE)
m6a.arrange.matrix = m6a.anno.matrix[,-c(2:3)]
rownames(m6a.arrange.matrix) = m6a.arrange.matrix$PeakRegion
m6a.arrange.matrix = m6a.arrange.matrix[,-1]
m6a.arrange.matrix <- as.data.frame(scale(m6a.arrange.matrix,center=T,scale=T))
new_coldata <- as.data.frame(design.matrix[which(row.names(design.matrix) %in% passed_sample_list),])
colnames(new_coldata) <- "Type"
new_m6a_matrix <- m6a.arrange.matrix[,which(colnames(m6a.arrange.matrix) %in% passed_sample_list)]
log2.new_m6a_matrix <- log2(new_m6a_matrix+1)
pca_plot(new_m6a_matrix,new_coldata)
pca_plot(m6a.arrange.matrix,coldata)
diffm6A.filelist <- "quantification/QNB_diffm6A_N_T.txt"
diffm6A.list <- NULL
diffm6A.list[[compare_str]] <- read.table(grep(sub("_vs_","_",compare_str), diffm6A.filelist, value = T),header = T,row.names = 1, check.names=F)
dmres = diffm6A.list[[which(names(diffm6A.list)==compare_str)]]
dmg = subset(dmres, pvalue <0.05 )
dm_mat = m6a.arrange.matrix[row.names(dmg),rownames(coldata)]
select <- dmg[order(dmg$log2FC, decreasing = TRUE), ]
dm_mat = dm_mat[rownames(select),]
select <- dmg[order(dmg$log2.RR, decreasing = TRUE), ]
dm_mat = dm_mat[rownames(select),]
dm_mat <- na.omit(dm_mat)
log2.dm_mat = log2(dm_mat+1)
log2.dm_mat = na.omit(log2.dm_mat)
pca_plot(log2.dm_mat,coldata)
pca_plot(log2.dm_mat,coldata)
dm_mat = m6a.arrange.matrix[row.names(dmg),rownames(coldata)]
select <- dmg[order(dmg$log2.RR, decreasing = TRUE), ]
dm_mat = dm_mat[rownames(select),]
dm_mat <- na.omit(dm_mat)
log2.dm_mat = log2(dm_mat+1)
log2.dm_mat = na.omit(log2.dm_mat)
pca_plot(log2.dm_mat,coldata)
pca_plot(dm_mat,coldata)
pca_plot(dmmat,coldata)
pca_plot(dm_mat,coldata)
m6a.arrange.matrix = m6a.anno.matrix[,-c(2:3)]
rownames(m6a.arrange.matrix) = m6a.arrange.matrix$PeakRegion
m6a.arrange.matrix = m6a.arrange.matrix[,-1]
#m6a.arrange.matrix <- as.data.frame(scale(m6a.arrange.matrix,center=T,scale=T))
m6a.arrange.matrix <- log2(m6a.arrange.matrix+1)
dmres = diffm6A.list[[which(names(diffm6A.list)==compare_str)]]
dmg = subset(dmres, pvalue <0.05 )
dm_mat = m6a.arrange.matrix[row.names(dmg),rownames(coldata)]
select <- dmg[order(dmg$log2.RR, decreasing = TRUE), ]
dm_mat = dm_mat[rownames(select),]
dm_mat <- na.omit(dm_mat)
log2.dm_mat = log2(dm_mat+1)
log2.dm_mat = na.omit(log2.dm_mat)
pca_plot(dm_mat,coldata)
log2.dm_mat = log2(dm_mat+1)
log2.dm_mat = na.omit(log2.dm_mat)
pca_plot(log2.dm_mat,coldata)
diffm6A.filelist <- "quantification/bedtools_diffm6A_N_T.txt"
diffm6A.list <- NULL
diffm6A.list[[compare_str]] <- read.table(grep(sub("_vs_","_",compare_str), diffm6A.filelist, value = T),header = T,row.names = 1, check.names=F)
dmres = diffm6A.list[[which(names(diffm6A.list)==compare_str)]]
dmg = subset(dmres, pvalue <0.05 )
dm_mat = m6a.arrange.matrix[row.names(dmg),rownames(coldata)]
select <- dmg[order(dmg$log2FC, decreasing = TRUE), ]
dm_mat = dm_mat[rownames(select),]
dm_mat <- na.omit(dm_mat)
log2.dm_mat = log2(dm_mat+1)
log2.dm_mat = na.omit(log2.dm_mat)
pca_plot(log2.dm_mat,coldata)
pca_plot(dm_mat,coldata)
pca_plot(m6a.arrange.matrix,coldata)
# m6A quantification matrix
m6a.matrix <- as.matrix(read.table(file = "quantification/QNB_quantification.matrix", header = T, row.names = 1, check.names=F))
m6a.anno.matrix <- as.data.frame(m6a.matrix)
m6a.anno.matrix$PeakRegion <- rownames(m6a.matrix)
m6a.anno.matrix <- merge(x = annotation.info,y = m6a.anno.matrix,by = "PeakRegion",all.y = TRUE)
m6a.arrange.matrix = m6a.anno.matrix[,-c(2:3)]
rownames(m6a.arrange.matrix) = m6a.arrange.matrix$PeakRegion
m6a.arrange.matrix = m6a.arrange.matrix[,-1]
m6a.arrange.matrix <- as.data.frame(scale(m6a.arrange.matrix,center=T,scale=T))
pca_plot(m6a.arrange.matrix,coldata)
pca_plot(m6a.arrange.matrix,new_coldata)
diffm6A.filelist <- "quantification/QNB_diffm6A_N_T.txt"
diffm6A.list <- NULL
diffm6A.list[[compare_str]] <- read.table(grep(sub("_vs_","_",compare_str), diffm6A.filelist, value = T),header = T,row.names = 1, check.names=F)
dmres = diffm6A.list[[which(names(diffm6A.list)==compare_str)]]
dmg = subset(dmres, pvalue <0.05 )
dm_mat = m6a.arrange.matrix[row.names(dmg),rownames(coldata)]
select <- dmg[order(dmg$log2FC, decreasing = TRUE), ]
select <- dmg[order(dmg$log2.RR, decreasing = TRUE), ]
dm_mat = dm_mat[rownames(select),]
dm_mat <- na.omit(dm_mat)
log2.dm_mat = log2(dm_mat+1)
pca_plot(dm_mat,coldata)
diffm6A.filelist <- "quantification/bedtools_diffm6A_N_T.txt"
diffm6A.list <- NULL
diffm6A.list[[compare_str]] <- read.table(grep(sub("_vs_","_",compare_str), diffm6A.filelist, value = T),header = T,row.names = 1, check.names=F)
dmres = diffm6A.list[[which(names(diffm6A.list)==compare_str)]]
dmres = diffm6A.list[[which(names(diffm6A.list)==compare_str)]]
dmg = subset(dmres, pvalue <0.05 )
# m6A quantification matrix
m6a.matrix <- as.matrix(read.table(file = "quantification/bedtools_quantification.matrix", header = T, row.names = 1, check.names=F))
m6a.anno.matrix <- as.data.frame(m6a.matrix)
m6a.anno.matrix$PeakRegion <- rownames(m6a.matrix)
m6a.anno.matrix <- merge(x = annotation.info,y = m6a.anno.matrix,by = "PeakRegion",all.y = TRUE)
m6a.arrange.matrix = m6a.anno.matrix[,-c(2:3)]
rownames(m6a.arrange.matrix) = m6a.arrange.matrix$PeakRegion
m6a.arrange.matrix = m6a.arrange.matrix[,-1]
#m6a.arrange.matrix <- as.data.frame(scale(m6a.arrange.matrix,center=T,scale=T))
m6a.arrange.matrix <- log2(m6a.arrange.matrix+1)
new_coldata <- as.data.frame(design.matrix[which(row.names(design.matrix) %in% passed_sample_list),])
colnames(new_coldata) <- "Type"
new_m6a_matrix <- m6a.arrange.matrix[,which(colnames(m6a.arrange.matrix) %in% passed_sample_list)]
log2.new_m6a_matrix <- log2(new_m6a_matrix+1)
pca_plot(m6a.arrange.matrix,new_coldata)
pca_plot(m6a.arrange.matrix,coldata)
pheatmap(dm_mat, cluster_rows=FALSE, show_rownames=F, cluster_cols=T, annotation_col=coldata,
main = "Heatmap of Different Methylation", scale = "row",breaks = bk)
# m6A quantification matrix
m6a.matrix <- as.matrix(read.table(file = "quantification/bedtools_quantification.matrix", header = T, row.names = 1, check.names=F))
m6a.anno.matrix <- as.data.frame(m6a.matrix)
m6a.anno.matrix$PeakRegion <- rownames(m6a.matrix)
m6a.anno.matrix <- merge(x = annotation.info,y = m6a.anno.matrix,by = "PeakRegion",all.y = TRUE)
m6a.arrange.matrix = m6a.anno.matrix[,-c(2:3)]
rownames(m6a.arrange.matrix) = m6a.arrange.matrix$PeakRegion
m6a.arrange.matrix = m6a.arrange.matrix[,-1]
#m6a.arrange.matrix <- as.data.frame(scale(m6a.arrange.matrix,center=T,scale=T))
m6a.arrange.matrix <- log2(m6a.arrange.matrix+1)
new_coldata <- as.data.frame(design.matrix[which(row.names(design.matrix) %in% passed_sample_list),])
colnames(new_coldata) <- "Type"
new_m6a_matrix <- m6a.arrange.matrix[,which(colnames(m6a.arrange.matrix) %in% passed_sample_list)]
log2.new_m6a_matrix <- log2(new_m6a_matrix+1)
pca_plot(m6a.arrange.matrix,new_coldata)
pca_plot(m6a.arrange.matrix,coldata)
# diffm6A list
compare_str = "N_vs_T"
diffm6A.filelist <- "quantification/bedtools_diffm6A_N_T.txt"
diffm6A.list <- NULL
diffm6A.list[[compare_str]] <- read.table(grep(sub("_vs_","_",compare_str), diffm6A.filelist, value = T),header = T,row.names = 1, check.names=F)
dmres = diffm6A.list[[which(names(diffm6A.list)==compare_str)]]
dmg = subset(dmres, abs(log2FC)> 0.58 & pvalue < 0.05)
dm_mat = m6a.arrange.matrix[row.names(dmg),rownames(coldata)]
select <- dmg[order(dmg$log2FC, decreasing = TRUE), ]
dm_mat = dm_mat[rownames(select),]
dm_mat <- na.omit(dm_mat)
log2.dm_mat = log2(dm_mat+1)
log2.dm_mat = na.omit(log2.dm_mat)
pca_plot(dm_mat,coldata)
dm_mat <- dm_mat[,order(sub("-B","",sub("[0-9]*","",colnames(dm_mat))))]
dmmat <- dm_mat[,which(colnames(dm_mat) %in% passed_sample_list)]
bk = unique(c(seq(-2,2, length=100)))
pheatmap(dm_mat, cluster_rows=FALSE, show_rownames=F, cluster_cols=T, annotation_col=coldata,
main = "Heatmap of Different Methylation", scale = "row",breaks = bk)
dmg = subset(dmres, pvalue < 0.05)
dm_mat = m6a.arrange.matrix[row.names(dmg),rownames(coldata)]
select <- dmg[order(dmg$log2FC, decreasing = TRUE), ]
dm_mat = dm_mat[rownames(select),]
dm_mat <- na.omit(dm_mat)
dm_mat <- dm_mat[,order(sub("-B","",sub("[0-9]*","",colnames(dm_mat))))]
dmmat <- dm_mat[,which(colnames(dm_mat) %in% passed_sample_list)]
bk = unique(c(seq(-2,2, length=100)))
pheatmap(dm_mat, cluster_rows=FALSE, show_rownames=F, cluster_cols=T, annotation_col=coldata,
main = "Heatmap of Different Methylation", scale = "row",breaks = bk)
pheatmap(dmmat, cluster_rows=FALSE, show_rownames=F, cluster_cols=T, annotation_col=new_coldata,
main = "Heatmap of Different Methylation", scale = "row",breaks = bk)
pheatmap(dmmat, cluster_rows=FALSE, show_rownames=F, cluster_cols=F, annotation_col=new_coldata,
main = "Heatmap of Different Methylation", scale = "row",breaks = bk)
library(readxl)
