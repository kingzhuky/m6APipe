/*
 * -------------------------------------------------
 *  nfcore/m6APipe Nextflow config file
 * -------------------------------------------------
 * Default config options for all environments.
 * Cluster-specific config options should be saved
 * in the conf folder and imported under a profile
 * name here.
 */

// Global default params, used in configs
params {
  container = 'nfcore/m6APipe:1.0' // Container slug. Stable releases should specify release tag!

  // Pipeline Options
  // Input files
  readPaths = "$baseDir/test_data"
  designfile = "$baseDir/test_data/designfile_test.csv"
  comparefile = "$baseDir/test_data/comparefile.txt"
  fasta = "$baseDir/test_data/genome_dir/hg38_chr22.fa"
  gtf = "$baseDir/test_data/genome_dir/gencode_chr22.gtf"
  // Setting main parameters of analysis mode 
  aligners = "star" // "star" OR "bwa" OR "tophat2" OR "hisat2" OR "none"
  peakCalling_mode = "independence" // "group" OR "independence"
  peakMerged_mode = "rank" // "rank" OR "macs2" OR "MATK" OR "metpeak" OR "mspc"
  expression_analysis_mode = "DESeq2" // "DESeq2" OR "edgeR" OR "none"
  methylation_analysis_mode = "QNB" // "MATK" OR "QNB" OR "Wilcox-test" OR "MeTDiff" OR "edgeR" OR "DESeq2"


  // Default parameters
  singleEnd = false
  gzip = true
  stranded = "no" // "yes" OR "no" OR "reverse"
  mapq_cutoff = 30 // "255" means unique mapping reads
  outdir = "$baseDir/results"
  tracedir = "${params.outdir}/pipeline_info/"

  // Index and Software Setting
  matk_jar = "$baseDir/MATK-1.0.jar"
  tophat2_index = "$baseDir/Genome/Tophat2Index/*"
  hisat2_index = "$baseDir/Genome/Hisat2Index/*"
  bwa_index = "$baseDir/Genome/BWAIndex/*"
  star_index = false
  saveReference = false
  help = false

  // Thread Setting
  max_memory = 100.GB
  max_cpus = 42
  max_time = 240.h

  // skipping modes Options
  skip_sort = false
  skip_peakCalling = false
  skip_diffpeakCalling = false
  skip_annotation = false
  skip_m6Aprediction = false
  skip_qc = false
  skip_motif = false

  // skipping tools Options
  // PeakCalling tools
  skip_metpeak = false
  skip_macs2 = false
  skip_matk = false
  skip_meyer = true
  // QC Steps
  skip_fastp = false
  skip_fastqc = false
  skip_rseqc = false
  skip_createbedgraph = false
  skip_genebody_coverage = true
  
  // Defaults
  clusterOptions = false
  hisatBuildMemory = 200 // Required amount of memory in GB to build HISAT2 index with splice sites
  subsampFilesizeThreshold = 10000000000 // Don't subsample BAMs for RSeQC gene_body_coverage if less than this
}

profiles {

  standard {
    includeConfig 'conf/base.config'
  }
  conda { process.conda = "$baseDir/environment.yml" }
  docker { 
    params.matk_jar = "/MATK-1.0.jar"
    includeConfig 'conf/base.config'
    includeConfig 'conf/docker.config'
    docker.enabled = true
    docker.runOptions = '-u $(id -u):$(id -g)'
    process.container = 'kingzhuky/m6apipe:latest'
  }
  singularity { singularity.enabled = true }
  C2 {
    includeConfig 'conf/base.config'
    includeConfig 'conf/C2.config'
  }
  none {
    // Don't load any config (for use with custom home configs)
  }

}

// Capture exit codes from upstream processes when piping
process.shell = ['/bin/bash', '-euo', 'pipefail']

timeline {
  enabled = true
  file = "${params.tracedir}/nfcore-m6APipe_timeline.html"
}
report {
  enabled = true
  file = "${params.tracedir}/nfcore-m6APipe_report.html"
}
trace {
  enabled = true
  file = "${params.tracedir}/nfcore-m6APipe_trace.txt"
}
dag {
  enabled = true
  file = "${params.tracedir}/nfcore-m6APipe_DAG.svg"
}

manifest {
  name = 'm6APipe'
  description = 'Nextflow MeRIP-seq analysis pipeline.'
  homePage = 'https://github.com/kingzhuky/m6APipe'
  version = '1.0'
  mainScript = 'main.nf'
  nextflowVersion = '>=0.32.0'
}

// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
  if(type == 'memory'){
    try {
      if(obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
        return params.max_memory as nextflow.util.MemoryUnit
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
      return obj
    }
  } else if(type == 'time'){
    try {
      if(obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
        return params.max_time as nextflow.util.Duration
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
      return obj
    }
  } else if(type == 'cpus'){
    try {
      return Math.min( obj, params.max_cpus as int )
    } catch (all) {
      println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
      return obj
    }
  }
}
